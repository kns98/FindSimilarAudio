/*
 * Mirage - High Performance Music Similarity and Automatic Playlist Generator
 * http://hop.at/mirage
 *
 * Copyright (C) 2007-2008 Dominik Schnitzer <dominik@schnitzer.at>
 * Changed and enhanced by Per Ivar Nerseth <perivar@nerseth.com>
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA  02110-1301, USA.
 */

using System;
using System.IO;

namespace Mirage
{
    public class MfccFailedException : Exception
    {
    }

    public class Mfcc
    {
        private readonly Matrix dct;
        private readonly Matrix filterWeights;
        private readonly int[,] fwFT;

        /// <summary>
        ///     Create a Mfcc object
        ///     This method is optimized since the Mel Filter Bands
        ///     and the DCT is loaded from files generated by Octave (or Matlab)
        /// </summary>
        /// <param name="winsize">window size</param>
        /// <param name="srate">sample rate</param>
        /// <param name="filters">number of filters (MEL COEFFICIENTS). E.g. 36 (SPHINX-III uses 40)</param>
        /// <param name="cc">number of MFCC COEFFICIENTS</param>
        public Mfcc(int winsize, int srate, int filters, int cc)
        {
            // Load the DCT
            dct = Matrix.Load(new FileStream("Mirage/Resources/dct.filter", FileMode.Open));
#if DEBUG
            if (Analyzer.DEBUG_INFO_VERBOSE) dct.DrawMatrixGraph("dct-mirage-optimized.png");
#endif

            // Load the MFCC filters from the filter File.
            filterWeights = Matrix.Load(new FileStream("Mirage/Resources/filterweights.filter", FileMode.Open));
#if DEBUG
            if (Analyzer.DEBUG_INFO_VERBOSE) filterWeights.DrawMatrixGraph("melfilters-mirage-optimized.png");
#endif

            fwFT = new int[filterWeights.rows, 2];
            for (var i = 0; i < filterWeights.rows; i++)
            {
                float last = 0;
                for (var j = 0; j < filterWeights.columns; j++)
                {
                    if (filterWeights.d[i, j] != 0 && last == 0)
                        fwFT[i, 0] = j;
                    else if (filterWeights.d[i, j] == 0 && last != 0) fwFT[i, 1] = j;
                    last = filterWeights.d[i, j];
                }

                if (last != 0) fwFT[i, 1] = filterWeights.columns;
            }
        }

        public Matrix Apply(ref Matrix m)
        {
            var t = new DbgTimer();
            t.Start();

            var mel = new Matrix(filterWeights.rows, m.columns);

            var mc = m.columns;
            var melcolumns = mel.columns;
            var fwc = filterWeights.columns;
            var fwr = filterWeights.rows;

            unsafe
            {
                fixed (float* md = m.d, fwd = filterWeights.d, meld = mel.d)
                {
                    for (var i = 0; i < mc; i++)
                    for (var k = 0; k < fwr; k++)
                    {
                        var idx = k * melcolumns + i;
                        var kfwc = k * fwc;

                        // The filter weights matrix is mostly 0.
                        // So only multiply non-zero elements!
                        for (var j = fwFT[k, 0]; j < fwFT[k, 1]; j++) meld[idx] += fwd[kfwc + j] * md[j * mc + i];

                        meld[idx] = meld[idx] < 1.0f ? 0 : (float)(10.0 * Math.Log10(meld[idx]));
                    }
                }
            }

            try
            {
                var mfcc = dct.Multiply(mel);
                Dbg.WriteLine("Mirage - mfcc Execution Time: {0} ms", t.Stop().TotalMilliseconds);
                return mfcc;
            }
            catch (MatrixDimensionMismatchException)
            {
                throw new MfccFailedException();
            }
        }
    }
}